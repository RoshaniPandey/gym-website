// Module Definition
(function(a, b) {
    if (typeof define === "function" && define.amd) {
        define(["module", "exports"], b);
    } else if (typeof exports !== "undefined") {
        b(module, exports);
    } else {
        var c = { exports: {} };
        b(c, c.exports);
        a.WOW = c.exports;
    }
}(this, function(a, b) {
    "use strict";

    // Helper Functions
    function c(a, b) {
        if (!(a instanceof b)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function d(a, b) {
        return b.indexOf(a) >= 0;
    }

    function e(a, b) {
        for (var c in b) {
            if (a[c] == null) {
                var d = b[c];
                a[c] = d;
            }
        }
        return a;
    }

    function f(a) {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(a);
    }

    function g(a) {
        var b = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
        var c = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
        var d = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
        var e = void 0;
        if (document.createEvent) {
            e = document.createEvent("CustomEvent");
            e.initCustomEvent(a, b, c, d);
        } else if (document.createEventObject) {
            e = document.createEventObject();
            e.eventType = a;
        } else {
            e.eventName = a;
        }
        return e;
    }

    function h(a, b) {
        if (a.dispatchEvent) {
            a.dispatchEvent(b);
        } else if (b in a) {
            a[b]();
        } else if ("on" + b in a) {
            a["on" + b]();
        }
    }

    function i(a, b, c) {
        if (a.addEventListener) {
            a.addEventListener(b, c, false);
        } else if (a.attachEvent) {
            a.attachEvent("on" + b, c);
        } else {
            a[b] = c;
        }
    }

    function j(a, b, c) {
        if (a.removeEventListener) {
            a.removeEventListener(b, c, false);
        } else if (a.detachEvent) {
            a.detachEvent("on" + b, c);
        } else {
            delete a[b];
        }
    }

    function k() {
        return "innerHeight" in window ? window.innerHeight : document.documentElement.clientHeight;
    }

    // WOW.js Class
    class WOW {
        constructor(options) {
            this.defaults = {
                boxClass: "wow",
                animateClass: "animated",
                offset: 0,
                mobile: true,
                live: true,
                callback: null,
                scrollContainer: null,
                resetAnimation: true
            };
            this.animate = function() {
                return "requestAnimationFrame" in window ? function(a) {
                    return window.requestAnimationFrame(a);
                } : function(a) {
                    return a();
                };
            }();
            this.vendors = ["moz", "webkit"];
            this.start = this.start.bind(this);
            this.resetAnimation = this.resetAnimation.bind(this);
            this.scrollHandler = this.scrollHandler.bind(this);
            this.scrollCallback = this.scrollCallback.bind(this);
            this.scrolled = true;
            this.config = e(options, this.defaults);
            if (options.scrollContainer != null) {
                this.config.scrollContainer = document.querySelector(options.scrollContainer);
            }
            this.animationNameCache = new WeakMap();
            this.wowEvent = g(this.config.boxClass);
        }

        init() {
            this.element = window.document.documentElement;
            if (d(document.readyState, ["interactive", "complete"])) {
                this.start();
            } else {
                i(document, "DOMContentLoaded", this.start);
            }
            this.finished = [];
        }

        start() {
            this.stopped = false;
            this.boxes = [].slice.call(this.element.querySelectorAll("." + this.config.boxClass));
            this.all = this.boxes.slice(0);
            if (this.boxes.length) {
                if (this.disabled()) {
                    this.resetStyle();
                } else {
                    for (var b = 0; b < this.boxes.length; b++) {
                        var c = this.boxes[b];
                        this.applyStyle(c, true);
                    }
                }
                if (!this.disabled()) {
                    i(this.config.scrollContainer || window, "scroll", this.scrollHandler);
                    i(window, "resize", this.scrollHandler);
                    this.interval = setInterval(this.scrollCallback, 50);
                }
                if (this.config.live) {
                    var d = new MutationObserver((b) => {
                        for (var c = 0; c < b.length; c++) {
                            for (var d = b[c], e = 0; e < d.addedNodes.length; e++) {
                                var f = d.addedNodes[e];
                                this.doSync(f);
                            }
                        }
                    });
                    d.observe(document.body, { childList: true, subtree: true });
                }
            }
        }

        stop() {
            this.stopped = true;
            j(this.config.scrollContainer || window, "scroll", this.scrollHandler);
            j(window, "resize", this.scrollHandler);
            if (this.interval != null) {
                clearInterval(this.interval);
            }
        }

        sync() {
            if (MutationObserver.notSupported) {
                this.doSync(this.element);
            }
        }

        doSync(a) {
            if (typeof a === "undefined" || a === null) {
                a = this.element;
            }
            if (a.nodeType === 1) {
                a = a.parentNode || a;
                var b = a.querySelectorAll("." + this.config.boxClass);
                for (var c = 0; c < b.length; c++) {
                    var e = b[c];
                    if (!d(e, this.all)) {
                        this.boxes.push(e);
                        this.all.push(e);
                        if (this.stopped || this.disabled()) {
                            this.resetStyle();
                        } else {
                            this.applyStyle(e, true);
                        }
                        this.scrolled = true;
                    }
                }
            }
        }

        show(a) {
            this.applyStyle(a);
            a.className = a.className + " " + this.config.animateClass;
            if (this.config.callback != null) {
                this.config.callback(a);
            }
            h(a, this.wowEvent);
            if (this.config.resetAnimation) {
                i(a, "animationend", this.resetAnimation);
                i(a, "oanimationend", this.resetAnimation);
                i(a, "webkitAnimationEnd", this.resetAnimation);
                i(a, "MSAnimationEnd", this.resetAnimation);
            }
            return a;
        }

        applyStyle(a, b) {
            var c = this, d = a.getAttribute("data-wow-duration"), e = a.getAttribute("data-wow-delay"), f = a.getAttribute("data-wow-iteration");
            return this.animate(() => {
                return c.customStyle(a, b, d, e, f);
            });
        }

        resetStyle() {
            for (var a = 0; a < this.boxes.length; a++) {
                var b = this.boxes[a];
                b.style.visibility = "visible";
            }
        }

        resetAnimation(a) {
            if (a.type.toLowerCase().indexOf("animationend") >= 0) {
                var b = a.target || a.srcElement;
                b.className = b.className.replace(this.config.animateClass, "").trim();
            }
        }

        customStyle(a, b, c, d, e) {
            if (b) {
                this.cacheAnimationName(a);
            }
            a.style.visibility = b ? "hidden" : "visible";
            if (c) {
                this.vendorSet(a.style, { animationDuration: c });
            }
            if (d) {
                this.vendorSet(a.style, { animationDelay: d });
            }
            if (e) {
                this.vendorSet(a.style, { animationIterationCount: e });
            }
            this.vendorSet(a.style, { animationName: b ? "none" : this.cachedAnimationName(a) });
            return a;
        }

        vendorSet(a, b) {
            for (var c in b) {
                if (b.hasOwnProperty(c)) {
                    var d = b[c];
                    a[c] = d;
                    for (var e = 0; e < this.vendors.length; e++) {
                        var f = this.vendors[e];
                        a[f + c.charAt(0).toUpperCase() + c.substr(1)] = d;
                    }
                }
            }
        }

        vendorCSS(a, b) {
            var c = getComputedStyle(a), d = c.getPropertyCSSValue(b);
            for (var e = 0; e < this.vendors.length; e++) {
                var f = this.vendors[e];
                d = d || c.getPropertyCSSValue("-" + f + "-" + b);
            }
            return d;
        }

        animationName(a) {
            var b = void 0;
            try {
                b = this.vendorCSS(a, "animation-name").cssText;
            } catch (c) {
                b = getComputedStyle(a).getPropertyValue("animation-name");
            }
            if (b === "none") {
                return "";
            }
            return b;
        }

        cacheAnimationName(a) {
            return this.animationNameCache.set(a, this.animationName(a));
        }

        cachedAnimationName(a) {
            return this.animationNameCache.get(a);
        }

        scrollHandler() {
            this.scrolled = true;
        }

        scrollCallback() {
            if (this.scrolled) {
                this.scrolled = false;
                var a = [];
                for (var b = 0; b < this.boxes.length; b++) {
                    var c = this.boxes[b];
                    if (c) {
                        if (this.isVisible(c)) {
                            this.show(c);
                            continue;
                        }
                        a.push(c);
                    }
                }
                this.boxes = a;
                if (!this.boxes.length && !this.config.live) {
                    this.stop();
                }
            }
        }

        offsetTop(a) {
            while (void 0 === a.offsetTop) {
                a = a.parentNode;
            }
            var b = a.offsetTop;
            while (a.offsetParent) {
                a = a.offsetParent;
                b += a.offsetTop;
            }
            return b;
        }

        isVisible(a) {
            var b = a.getAttribute("data-wow-offset") || this.config.offset;
            var c = this.config.scrollContainer && this.config.scrollContainer.scrollTop || window.pageYOffset;
            var d = c + Math.min(this.element.clientHeight, k()) - b;
            var e = this.offsetTop(a);
            var f = e + a.clientHeight;
            return d >= e && f >= c;
        }

        disabled() {
            return !this.config.mobile && f(navigator.userAgent);
        }
    }

    a.exports = WOW;
}));
